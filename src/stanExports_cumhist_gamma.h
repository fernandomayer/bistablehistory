// Generated by rstantools.  Do not edit by hand.

/*
    bistablehistory is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bistablehistory is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bistablehistory.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_cumhist_gamma_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_cumhist_gamma");
    reader.add_event(10, 10, "include", "/functions/common.stan");
    reader.add_event(10, 0, "start", "/functions/common.stan");
    reader.add_event(63, 53, "end", "/functions/common.stan");
    reader.add_event(63, 11, "restart", "model_cumhist_gamma");
    reader.add_event(65, 13, "include", "/data/common.stan");
    reader.add_event(65, 0, "start", "/data/common.stan");
    reader.add_event(98, 33, "end", "/data/common.stan");
    reader.add_event(98, 14, "restart", "model_cumhist_gamma");
    reader.add_event(100, 16, "include", "/parameters/common.stan");
    reader.add_event(100, 0, "start", "/parameters/common.stan");
    reader.add_event(104, 4, "end", "/parameters/common.stan");
    reader.add_event(104, 17, "restart", "model_cumhist_gamma");
    reader.add_event(110, 23, "include", "/transformed_parameters/history_computation.stan");
    reader.add_event(110, 0, "start", "/transformed_parameters/history_computation.stan");
    reader.add_event(144, 34, "end", "/transformed_parameters/history_computation.stan");
    reader.add_event(144, 24, "restart", "model_cumhist_gamma");
    reader.add_event(146, 26, "include", "/model/common.stan");
    reader.add_event(146, 0, "start", "/model/common.stan");
    reader.add_event(156, 10, "end", "/model/common.stan");
    reader.add_event(156, 27, "restart", "model_cumhist_gamma");
    reader.add_event(184, 53, "end", "model_cumhist_gamma");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
state_to_signal_levels(const T0__& mixed_level, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        validate_non_negative_index("signal_level", "2", 2);
        validate_non_negative_index("signal_level", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> signal_level(2, 3);
        stan::math::initialize(signal_level, DUMMY_VAR__);
        stan::math::fill(signal_level, DUMMY_VAR__);
        current_statement_begin__ = 26;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable signal_level");
        current_statement_begin__ = 27;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable signal_level");
        current_statement_begin__ = 28;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    mixed_level, 
                    "assigning variable signal_level");
        current_statement_begin__ = 29;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable signal_level");
        current_statement_begin__ = 30;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable signal_level");
        current_statement_begin__ = 31;
        stan::model::assign(signal_level, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    mixed_level, 
                    "assigning variable signal_level");
        current_statement_begin__ = 33;
        return stan::math::promote_scalar<fun_return_scalar_t__>(signal_level);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct state_to_signal_levels_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& mixed_level, std::ostream* pstream__) const {
        return state_to_signal_levels(mixed_level, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
compute_history(const T0__& history,
                    const T1__& signal,
                    const T2__& duration,
                    const T3__& tau, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 49;
        if (as_bool(logical_eq(history, signal))) {
            current_statement_begin__ = 51;
            return stan::math::promote_scalar<fun_return_scalar_t__>(history);
        } else if (as_bool(logical_gt(history, signal))) {
            {
            current_statement_begin__ = 55;
            local_scalar_t__ starting_x(DUMMY_VAR__);
            (void) starting_x;  // dummy to suppress unused var warning
            stan::math::initialize(starting_x, DUMMY_VAR__);
            stan::math::fill(starting_x, DUMMY_VAR__);
            stan::math::assign(starting_x,(-(tau) * stan::math::log(((history - signal) / (1 - signal)))));
            current_statement_begin__ = 56;
            return stan::math::promote_scalar<fun_return_scalar_t__>((((1 - signal) * stan::math::exp((-((duration + starting_x)) / tau))) + signal));
            }
        } else {
            {
            current_statement_begin__ = 60;
            local_scalar_t__ starting_x(DUMMY_VAR__);
            (void) starting_x;  // dummy to suppress unused var warning
            stan::math::initialize(starting_x, DUMMY_VAR__);
            stan::math::fill(starting_x, DUMMY_VAR__);
            stan::math::assign(starting_x,(-(tau) * stan::math::log(((signal - history) / signal))));
            current_statement_begin__ = 61;
            return stan::math::promote_scalar<fun_return_scalar_t__>((signal * (1 - stan::math::exp((-((duration + starting_x)) / tau)))));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct compute_history_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& history,
                    const T1__& signal,
                    const T2__& duration,
                    const T3__& tau, std::ostream* pstream__) const {
        return compute_history(history, signal, duration, tau, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_cumhist_gamma
  : public stan::model::model_base_crtp<model_cumhist_gamma> {
private:
        int rowsN;
        std::vector<double> duration;
        std::vector<int> state;
        std::vector<int> is_used;
        std::vector<int> run_start;
        std::vector<double> session_tmean;
        int clearN;
        std::vector<double> clear_duration;
        std::vector<double> history_starting_values;
        int fit_norm_tau;
        double fixed_norm_tau;
        std::vector<double> norm_tau_prior;
        int fit_mixed_state;
        double fixed_mixed_state;
        double mixed_state_prior_mu;
        double mixed_state_prior_kappa;
        int fit_history_mix;
        double fixed_history_mix;
        double history_mix_prior_mu;
        double history_mix_prior_kappa;
public:
    model_cumhist_gamma(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_cumhist_gamma(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_cumhist_gamma_namespace::model_cumhist_gamma";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "rowsN", "int", context__.to_vec());
            rowsN = int(0);
            vals_i__ = context__.vals_i("rowsN");
            pos__ = 0;
            rowsN = vals_i__[pos__++];
            check_greater_or_equal(function__, "rowsN", rowsN, 1);
            current_statement_begin__ = 69;
            validate_non_negative_index("duration", "rowsN", rowsN);
            context__.validate_dims("data initialization", "duration", "double", context__.to_vec(rowsN));
            duration = std::vector<double>(rowsN, double(0));
            vals_r__ = context__.vals_r("duration");
            pos__ = 0;
            size_t duration_k_0_max__ = rowsN;
            for (size_t k_0__ = 0; k_0__ < duration_k_0_max__; ++k_0__) {
                duration[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("state", "rowsN", rowsN);
            context__.validate_dims("data initialization", "state", "int", context__.to_vec(rowsN));
            state = std::vector<int>(rowsN, int(0));
            vals_i__ = context__.vals_i("state");
            pos__ = 0;
            size_t state_k_0_max__ = rowsN;
            for (size_t k_0__ = 0; k_0__ < state_k_0_max__; ++k_0__) {
                state[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("is_used", "rowsN", rowsN);
            context__.validate_dims("data initialization", "is_used", "int", context__.to_vec(rowsN));
            is_used = std::vector<int>(rowsN, int(0));
            vals_i__ = context__.vals_i("is_used");
            pos__ = 0;
            size_t is_used_k_0_max__ = rowsN;
            for (size_t k_0__ = 0; k_0__ < is_used_k_0_max__; ++k_0__) {
                is_used[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("run_start", "rowsN", rowsN);
            context__.validate_dims("data initialization", "run_start", "int", context__.to_vec(rowsN));
            run_start = std::vector<int>(rowsN, int(0));
            vals_i__ = context__.vals_i("run_start");
            pos__ = 0;
            size_t run_start_k_0_max__ = rowsN;
            for (size_t k_0__ = 0; k_0__ < run_start_k_0_max__; ++k_0__) {
                run_start[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 73;
            validate_non_negative_index("session_tmean", "rowsN", rowsN);
            context__.validate_dims("data initialization", "session_tmean", "double", context__.to_vec(rowsN));
            session_tmean = std::vector<double>(rowsN, double(0));
            vals_r__ = context__.vals_r("session_tmean");
            pos__ = 0;
            size_t session_tmean_k_0_max__ = rowsN;
            for (size_t k_0__ = 0; k_0__ < session_tmean_k_0_max__; ++k_0__) {
                session_tmean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "clearN", "int", context__.to_vec());
            clearN = int(0);
            vals_i__ = context__.vals_i("clearN");
            pos__ = 0;
            clearN = vals_i__[pos__++];
            current_statement_begin__ = 77;
            validate_non_negative_index("clear_duration", "clearN", clearN);
            context__.validate_dims("data initialization", "clear_duration", "double", context__.to_vec(clearN));
            clear_duration = std::vector<double>(clearN, double(0));
            vals_r__ = context__.vals_r("clear_duration");
            pos__ = 0;
            size_t clear_duration_k_0_max__ = clearN;
            for (size_t k_0__ = 0; k_0__ < clear_duration_k_0_max__; ++k_0__) {
                clear_duration[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 80;
            validate_non_negative_index("history_starting_values", "2", 2);
            context__.validate_dims("data initialization", "history_starting_values", "double", context__.to_vec(2));
            history_starting_values = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("history_starting_values");
            pos__ = 0;
            size_t history_starting_values_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < history_starting_values_k_0_max__; ++k_0__) {
                history_starting_values[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "fit_norm_tau", "int", context__.to_vec());
            fit_norm_tau = int(0);
            vals_i__ = context__.vals_i("fit_norm_tau");
            pos__ = 0;
            fit_norm_tau = vals_i__[pos__++];
            check_greater_or_equal(function__, "fit_norm_tau", fit_norm_tau, 0);
            check_less_or_equal(function__, "fit_norm_tau", fit_norm_tau, 1);
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "fixed_norm_tau", "double", context__.to_vec());
            fixed_norm_tau = double(0);
            vals_r__ = context__.vals_r("fixed_norm_tau");
            pos__ = 0;
            fixed_norm_tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "fixed_norm_tau", fixed_norm_tau, 0);
            current_statement_begin__ = 85;
            validate_non_negative_index("norm_tau_prior", "2", 2);
            context__.validate_dims("data initialization", "norm_tau_prior", "double", context__.to_vec(2));
            norm_tau_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("norm_tau_prior");
            pos__ = 0;
            size_t norm_tau_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < norm_tau_prior_k_0_max__; ++k_0__) {
                norm_tau_prior[k_0__] = vals_r__[pos__++];
            }
            size_t norm_tau_prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < norm_tau_prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "norm_tau_prior[i_0__]", norm_tau_prior[i_0__], 0);
            }
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "fit_mixed_state", "int", context__.to_vec());
            fit_mixed_state = int(0);
            vals_i__ = context__.vals_i("fit_mixed_state");
            pos__ = 0;
            fit_mixed_state = vals_i__[pos__++];
            check_greater_or_equal(function__, "fit_mixed_state", fit_mixed_state, 0);
            check_less_or_equal(function__, "fit_mixed_state", fit_mixed_state, 1);
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "fixed_mixed_state", "double", context__.to_vec());
            fixed_mixed_state = double(0);
            vals_r__ = context__.vals_r("fixed_mixed_state");
            pos__ = 0;
            fixed_mixed_state = vals_r__[pos__++];
            check_greater_or_equal(function__, "fixed_mixed_state", fixed_mixed_state, 0);
            check_less_or_equal(function__, "fixed_mixed_state", fixed_mixed_state, 1);
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "mixed_state_prior_mu", "double", context__.to_vec());
            mixed_state_prior_mu = double(0);
            vals_r__ = context__.vals_r("mixed_state_prior_mu");
            pos__ = 0;
            mixed_state_prior_mu = vals_r__[pos__++];
            check_greater_or_equal(function__, "mixed_state_prior_mu", mixed_state_prior_mu, 0);
            check_less_or_equal(function__, "mixed_state_prior_mu", mixed_state_prior_mu, 1);
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "mixed_state_prior_kappa", "double", context__.to_vec());
            mixed_state_prior_kappa = double(0);
            vals_r__ = context__.vals_r("mixed_state_prior_kappa");
            pos__ = 0;
            mixed_state_prior_kappa = vals_r__[pos__++];
            check_greater_or_equal(function__, "mixed_state_prior_kappa", mixed_state_prior_kappa, 0);
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "fit_history_mix", "int", context__.to_vec());
            fit_history_mix = int(0);
            vals_i__ = context__.vals_i("fit_history_mix");
            pos__ = 0;
            fit_history_mix = vals_i__[pos__++];
            check_greater_or_equal(function__, "fit_history_mix", fit_history_mix, 0);
            check_less_or_equal(function__, "fit_history_mix", fit_history_mix, 1);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "fixed_history_mix", "double", context__.to_vec());
            fixed_history_mix = double(0);
            vals_r__ = context__.vals_r("fixed_history_mix");
            pos__ = 0;
            fixed_history_mix = vals_r__[pos__++];
            check_greater_or_equal(function__, "fixed_history_mix", fixed_history_mix, 0);
            check_less_or_equal(function__, "fixed_history_mix", fixed_history_mix, 1);
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "history_mix_prior_mu", "double", context__.to_vec());
            history_mix_prior_mu = double(0);
            vals_r__ = context__.vals_r("history_mix_prior_mu");
            pos__ = 0;
            history_mix_prior_mu = vals_r__[pos__++];
            check_greater_or_equal(function__, "history_mix_prior_mu", history_mix_prior_mu, 0);
            check_less_or_equal(function__, "history_mix_prior_mu", history_mix_prior_mu, 1);
            current_statement_begin__ = 97;
            context__.validate_dims("data initialization", "history_mix_prior_kappa", "double", context__.to_vec());
            history_mix_prior_kappa = double(0);
            vals_r__ = context__.vals_r("history_mix_prior_kappa");
            pos__ = 0;
            history_mix_prior_kappa = vals_r__[pos__++];
            check_greater_or_equal(function__, "history_mix_prior_kappa", history_mix_prior_kappa, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 101;
            validate_non_negative_index("normalized_tau", "(fit_norm_tau ? 1 : 0 )", (fit_norm_tau ? 1 : 0 ));
            num_params_r__ += (1 * (fit_norm_tau ? 1 : 0 ));
            current_statement_begin__ = 102;
            validate_non_negative_index("mixed_state", "(fit_mixed_state ? 1 : 0 )", (fit_mixed_state ? 1 : 0 ));
            num_params_r__ += (1 * (fit_mixed_state ? 1 : 0 ));
            current_statement_begin__ = 103;
            validate_non_negative_index("history_mixture", "(fit_history_mix ? 1 : 0 )", (fit_history_mix ? 1 : 0 ));
            num_params_r__ += (1 * (fit_history_mix ? 1 : 0 ));
            current_statement_begin__ = 105;
            validate_non_negative_index("a", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 106;
            validate_non_negative_index("bHistory", "2", 2);
            num_params_r__ += (1 * 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_cumhist_gamma() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 101;
        if (!(context__.contains_r("normalized_tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable normalized_tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("normalized_tau");
        pos__ = 0U;
        validate_non_negative_index("normalized_tau", "(fit_norm_tau ? 1 : 0 )", (fit_norm_tau ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "normalized_tau", "double", context__.to_vec((fit_norm_tau ? 1 : 0 )));
        std::vector<double> normalized_tau((fit_norm_tau ? 1 : 0 ), double(0));
        size_t normalized_tau_k_0_max__ = (fit_norm_tau ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < normalized_tau_k_0_max__; ++k_0__) {
            normalized_tau[k_0__] = vals_r__[pos__++];
        }
        size_t normalized_tau_i_0_max__ = (fit_norm_tau ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < normalized_tau_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, normalized_tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable normalized_tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 102;
        if (!(context__.contains_r("mixed_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixed_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixed_state");
        pos__ = 0U;
        validate_non_negative_index("mixed_state", "(fit_mixed_state ? 1 : 0 )", (fit_mixed_state ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "mixed_state", "double", context__.to_vec((fit_mixed_state ? 1 : 0 )));
        std::vector<double> mixed_state((fit_mixed_state ? 1 : 0 ), double(0));
        size_t mixed_state_k_0_max__ = (fit_mixed_state ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < mixed_state_k_0_max__; ++k_0__) {
            mixed_state[k_0__] = vals_r__[pos__++];
        }
        size_t mixed_state_i_0_max__ = (fit_mixed_state ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < mixed_state_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, mixed_state[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixed_state: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 103;
        if (!(context__.contains_r("history_mixture")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable history_mixture missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("history_mixture");
        pos__ = 0U;
        validate_non_negative_index("history_mixture", "(fit_history_mix ? 1 : 0 )", (fit_history_mix ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "history_mixture", "double", context__.to_vec((fit_history_mix ? 1 : 0 )));
        std::vector<double> history_mixture((fit_history_mix ? 1 : 0 ), double(0));
        size_t history_mixture_k_0_max__ = (fit_history_mix ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < history_mixture_k_0_max__; ++k_0__) {
            history_mixture[k_0__] = vals_r__[pos__++];
        }
        size_t history_mixture_i_0_max__ = (fit_history_mix ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < history_mixture_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, history_mixture[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable history_mixture: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 105;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "2", 2);
        context__.validate_dims("parameter initialization", "a", "double", context__.to_vec(2));
        std::vector<double> a(2, double(0));
        size_t a_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
            a[k_0__] = vals_r__[pos__++];
        }
        size_t a_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < a_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(a[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 106;
        if (!(context__.contains_r("bHistory")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bHistory missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bHistory");
        pos__ = 0U;
        validate_non_negative_index("bHistory", "2", 2);
        context__.validate_dims("parameter initialization", "bHistory", "double", context__.to_vec(2));
        std::vector<double> bHistory(2, double(0));
        size_t bHistory_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < bHistory_k_0_max__; ++k_0__) {
            bHistory[k_0__] = vals_r__[pos__++];
        }
        size_t bHistory_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < bHistory_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(bHistory[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bHistory: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 101;
            std::vector<local_scalar_t__> normalized_tau;
            size_t normalized_tau_d_0_max__ = (fit_norm_tau ? 1 : 0 );
            normalized_tau.reserve(normalized_tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < normalized_tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    normalized_tau.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    normalized_tau.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 102;
            std::vector<local_scalar_t__> mixed_state;
            size_t mixed_state_d_0_max__ = (fit_mixed_state ? 1 : 0 );
            mixed_state.reserve(mixed_state_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mixed_state_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mixed_state.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    mixed_state.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 103;
            std::vector<local_scalar_t__> history_mixture;
            size_t history_mixture_d_0_max__ = (fit_history_mix ? 1 : 0 );
            history_mixture.reserve(history_mixture_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < history_mixture_d_0_max__; ++d_0__) {
                if (jacobian__)
                    history_mixture.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    history_mixture.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 105;
            std::vector<local_scalar_t__> a;
            size_t a_d_0_max__ = 2;
            a.reserve(a_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a.push_back(in__.scalar_constrain(lp__));
                else
                    a.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 106;
            std::vector<local_scalar_t__> bHistory;
            size_t bHistory_d_0_max__ = 2;
            bHistory.reserve(bHistory_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < bHistory_d_0_max__; ++d_0__) {
                if (jacobian__)
                    bHistory.push_back(in__.scalar_constrain(lp__));
                else
                    bHistory.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 111;
            validate_non_negative_index("history_mix", "clearN", clearN);
            std::vector<local_scalar_t__> history_mix(clearN, local_scalar_t__(0));
            stan::math::initialize(history_mix, DUMMY_VAR__);
            stan::math::fill(history_mix, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 113;
            local_scalar_t__ norm_tau(DUMMY_VAR__);
            (void) norm_tau;  // dummy to suppress unused var warning
            stan::math::initialize(norm_tau, DUMMY_VAR__);
            stan::math::fill(norm_tau, DUMMY_VAR__);
            stan::math::assign(norm_tau,(fit_norm_tau ? stan::math::promote_scalar<local_scalar_t__>(get_base1(normalized_tau, 1, "normalized_tau", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_norm_tau) ));
            current_statement_begin__ = 114;
            local_scalar_t__ history_mixing_prop(DUMMY_VAR__);
            (void) history_mixing_prop;  // dummy to suppress unused var warning
            stan::math::initialize(history_mixing_prop, DUMMY_VAR__);
            stan::math::fill(history_mixing_prop, DUMMY_VAR__);
            stan::math::assign(history_mixing_prop,(fit_history_mix ? stan::math::promote_scalar<local_scalar_t__>(get_base1(history_mixture, 1, "history_mixture", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_history_mix) ));
            current_statement_begin__ = 115;
            validate_non_negative_index("level", "2", 2);
            validate_non_negative_index("level", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> level(2, 3);
            stan::math::initialize(level, DUMMY_VAR__);
            stan::math::fill(level, DUMMY_VAR__);
            stan::math::assign(level,state_to_signal_levels((fit_mixed_state ? stan::math::promote_scalar<local_scalar_t__>(get_base1(mixed_state, 1, "mixed_state", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_mixed_state) ), pstream__));
            current_statement_begin__ = 116;
            validate_non_negative_index("current_history", "2", 2);
            std::vector<local_scalar_t__  > current_history(2, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(current_history, DUMMY_VAR__);
            stan::math::fill(current_history, DUMMY_VAR__);
            current_statement_begin__ = 117;
            local_scalar_t__ tau(DUMMY_VAR__);
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 120;
            int iH(0);
            (void) iH;  // dummy to suppress unused var warning
            stan::math::fill(iH, std::numeric_limits<int>::min());
            stan::math::assign(iH,1);
            current_statement_begin__ = 123;
            for (int iT = 1; iT <= rowsN; ++iT) {
                current_statement_begin__ = 125;
                if (as_bool(get_base1(run_start, iT, "run_start", 1))) {
                    current_statement_begin__ = 126;
                    stan::math::assign(tau, (get_base1(session_tmean, iT, "session_tmean", 1) * norm_tau));
                    current_statement_begin__ = 127;
                    stan::math::assign(current_history, history_starting_values);
                }
                current_statement_begin__ = 131;
                if (as_bool(logical_eq(get_base1(is_used, iT, "is_used", 1), 1))) {
                    current_statement_begin__ = 132;
                    stan::model::assign(history_mix, 
                                stan::model::cons_list(stan::model::index_uni(iH), stan::model::nil_index_list()), 
                                ((history_mixing_prop * get_base1(current_history, get_base1(state, iT, "state", 1), "current_history", 1)) + ((1 - history_mixing_prop) * get_base1(current_history, (3 - get_base1(state, iT, "state", 1)), "current_history", 1))), 
                                "assigning variable history_mix");
                    current_statement_begin__ = 134;
                    stan::math::assign(iH, (iH + 1));
                }
                current_statement_begin__ = 138;
                for (int iState = 1; iState <= 2; ++iState) {
                    current_statement_begin__ = 139;
                    stan::model::assign(current_history, 
                                stan::model::cons_list(stan::model::index_uni(iState), stan::model::nil_index_list()), 
                                compute_history(get_base1(current_history, iState, "current_history", 1), get_base1(level, iState, get_base1(state, iT, "state", 1), "level", 1), get_base1(duration, iT, "duration", 1), tau, pstream__), 
                                "assigning variable current_history");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 111;
            size_t history_mix_k_0_max__ = clearN;
            for (size_t k_0__ = 0; k_0__ < history_mix_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(history_mix[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: history_mix" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable history_mix: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 148;
            if (as_bool(fit_norm_tau)) {
                current_statement_begin__ = 148;
                lp_accum__.add(gamma_log<propto__>(normalized_tau, get_base1(norm_tau_prior, 1, "norm_tau_prior", 1), (1 / get_base1(norm_tau_prior, 2, "norm_tau_prior", 1))));
            }
            current_statement_begin__ = 151;
            if (as_bool(fit_mixed_state)) {
                current_statement_begin__ = 151;
                lp_accum__.add(beta_proportion_log<propto__>(mixed_state, mixed_state_prior_mu, mixed_state_prior_kappa));
            }
            current_statement_begin__ = 154;
            if (as_bool(fixed_history_mix)) {
                current_statement_begin__ = 154;
                lp_accum__.add(beta_proportion_log<propto__>(history_mixture, history_mix_prior_mu, history_mix_prior_kappa));
            }
            current_statement_begin__ = 156;
            lp_accum__.add(normal_log<propto__>(a, 0, 10));
            current_statement_begin__ = 157;
            lp_accum__.add(normal_log<propto__>(bHistory, 0, 1));
            current_statement_begin__ = 160;
            for (int iClear = 1; iClear <= clearN; ++iClear) {
                current_statement_begin__ = 161;
                lp_accum__.add(gamma_log<propto__>(get_base1(clear_duration, iClear, "clear_duration", 1), stan::math::exp((get_base1(a, 1, "a", 1) + (get_base1(bHistory, 1, "bHistory", 1) * get_base1(history_mix, iClear, "history_mix", 1)))), (1 / stan::math::exp((get_base1(a, 2, "a", 1) + (get_base1(bHistory, 2, "bHistory", 1) * get_base1(history_mix, iClear, "history_mix", 1)))))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("normalized_tau");
        names__.push_back("mixed_state");
        names__.push_back("history_mixture");
        names__.push_back("a");
        names__.push_back("bHistory");
        names__.push_back("history_mix");
        names__.push_back("log_lik");
        names__.push_back("predicted_duration");
        names__.push_back("shape");
        names__.push_back("scale");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((fit_norm_tau ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fit_mixed_state ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((fit_history_mix ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(clearN);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(clearN);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(clearN);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_cumhist_gamma_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> normalized_tau;
        size_t normalized_tau_d_0_max__ = (fit_norm_tau ? 1 : 0 );
        normalized_tau.reserve(normalized_tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < normalized_tau_d_0_max__; ++d_0__) {
            normalized_tau.push_back(in__.scalar_lb_constrain(0));
        }
        size_t normalized_tau_k_0_max__ = (fit_norm_tau ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < normalized_tau_k_0_max__; ++k_0__) {
            vars__.push_back(normalized_tau[k_0__]);
        }
        std::vector<double> mixed_state;
        size_t mixed_state_d_0_max__ = (fit_mixed_state ? 1 : 0 );
        mixed_state.reserve(mixed_state_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mixed_state_d_0_max__; ++d_0__) {
            mixed_state.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t mixed_state_k_0_max__ = (fit_mixed_state ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < mixed_state_k_0_max__; ++k_0__) {
            vars__.push_back(mixed_state[k_0__]);
        }
        std::vector<double> history_mixture;
        size_t history_mixture_d_0_max__ = (fit_history_mix ? 1 : 0 );
        history_mixture.reserve(history_mixture_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < history_mixture_d_0_max__; ++d_0__) {
            history_mixture.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t history_mixture_k_0_max__ = (fit_history_mix ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < history_mixture_k_0_max__; ++k_0__) {
            vars__.push_back(history_mixture[k_0__]);
        }
        std::vector<double> a;
        size_t a_d_0_max__ = 2;
        a.reserve(a_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a_d_0_max__; ++d_0__) {
            a.push_back(in__.scalar_constrain());
        }
        size_t a_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
            vars__.push_back(a[k_0__]);
        }
        std::vector<double> bHistory;
        size_t bHistory_d_0_max__ = 2;
        bHistory.reserve(bHistory_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < bHistory_d_0_max__; ++d_0__) {
            bHistory.push_back(in__.scalar_constrain());
        }
        size_t bHistory_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < bHistory_k_0_max__; ++k_0__) {
            vars__.push_back(bHistory[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 111;
            validate_non_negative_index("history_mix", "clearN", clearN);
            std::vector<double> history_mix(clearN, double(0));
            stan::math::initialize(history_mix, DUMMY_VAR__);
            stan::math::fill(history_mix, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 113;
            local_scalar_t__ norm_tau(DUMMY_VAR__);
            (void) norm_tau;  // dummy to suppress unused var warning
            stan::math::initialize(norm_tau, DUMMY_VAR__);
            stan::math::fill(norm_tau, DUMMY_VAR__);
            stan::math::assign(norm_tau,(fit_norm_tau ? stan::math::promote_scalar<local_scalar_t__>(get_base1(normalized_tau, 1, "normalized_tau", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_norm_tau) ));
            current_statement_begin__ = 114;
            local_scalar_t__ history_mixing_prop(DUMMY_VAR__);
            (void) history_mixing_prop;  // dummy to suppress unused var warning
            stan::math::initialize(history_mixing_prop, DUMMY_VAR__);
            stan::math::fill(history_mixing_prop, DUMMY_VAR__);
            stan::math::assign(history_mixing_prop,(fit_history_mix ? stan::math::promote_scalar<local_scalar_t__>(get_base1(history_mixture, 1, "history_mixture", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_history_mix) ));
            current_statement_begin__ = 115;
            validate_non_negative_index("level", "2", 2);
            validate_non_negative_index("level", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> level(2, 3);
            stan::math::initialize(level, DUMMY_VAR__);
            stan::math::fill(level, DUMMY_VAR__);
            stan::math::assign(level,state_to_signal_levels((fit_mixed_state ? stan::math::promote_scalar<local_scalar_t__>(get_base1(mixed_state, 1, "mixed_state", 1)) : stan::math::promote_scalar<local_scalar_t__>(fixed_mixed_state) ), pstream__));
            current_statement_begin__ = 116;
            validate_non_negative_index("current_history", "2", 2);
            std::vector<local_scalar_t__  > current_history(2, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(current_history, DUMMY_VAR__);
            stan::math::fill(current_history, DUMMY_VAR__);
            current_statement_begin__ = 117;
            local_scalar_t__ tau(DUMMY_VAR__);
            (void) tau;  // dummy to suppress unused var warning
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 120;
            int iH(0);
            (void) iH;  // dummy to suppress unused var warning
            stan::math::fill(iH, std::numeric_limits<int>::min());
            stan::math::assign(iH,1);
            current_statement_begin__ = 123;
            for (int iT = 1; iT <= rowsN; ++iT) {
                current_statement_begin__ = 125;
                if (as_bool(get_base1(run_start, iT, "run_start", 1))) {
                    current_statement_begin__ = 126;
                    stan::math::assign(tau, (get_base1(session_tmean, iT, "session_tmean", 1) * norm_tau));
                    current_statement_begin__ = 127;
                    stan::math::assign(current_history, history_starting_values);
                }
                current_statement_begin__ = 131;
                if (as_bool(logical_eq(get_base1(is_used, iT, "is_used", 1), 1))) {
                    current_statement_begin__ = 132;
                    stan::model::assign(history_mix, 
                                stan::model::cons_list(stan::model::index_uni(iH), stan::model::nil_index_list()), 
                                ((history_mixing_prop * get_base1(current_history, get_base1(state, iT, "state", 1), "current_history", 1)) + ((1 - history_mixing_prop) * get_base1(current_history, (3 - get_base1(state, iT, "state", 1)), "current_history", 1))), 
                                "assigning variable history_mix");
                    current_statement_begin__ = 134;
                    stan::math::assign(iH, (iH + 1));
                }
                current_statement_begin__ = 138;
                for (int iState = 1; iState <= 2; ++iState) {
                    current_statement_begin__ = 139;
                    stan::model::assign(current_history, 
                                stan::model::cons_list(stan::model::index_uni(iState), stan::model::nil_index_list()), 
                                compute_history(get_base1(current_history, iState, "current_history", 1), get_base1(level, iState, get_base1(state, iT, "state", 1), "level", 1), get_base1(duration, iT, "duration", 1), tau, pstream__), 
                                "assigning variable current_history");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t history_mix_k_0_max__ = clearN;
                for (size_t k_0__ = 0; k_0__ < history_mix_k_0_max__; ++k_0__) {
                    vars__.push_back(history_mix[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 166;
            validate_non_negative_index("log_lik", "clearN", clearN);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(clearN);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("predicted_duration", "clearN", clearN);
            Eigen::Matrix<double, Eigen::Dynamic, 1> predicted_duration(clearN);
            stan::math::initialize(predicted_duration, DUMMY_VAR__);
            stan::math::fill(predicted_duration, DUMMY_VAR__);
            current_statement_begin__ = 170;
            double shape;
            (void) shape;  // dummy to suppress unused var warning
            stan::math::initialize(shape, DUMMY_VAR__);
            stan::math::fill(shape, DUMMY_VAR__);
            current_statement_begin__ = 171;
            double scale;
            (void) scale;  // dummy to suppress unused var warning
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 173;
            for (int iClear = 1; iClear <= clearN; ++iClear) {
                current_statement_begin__ = 174;
                stan::math::assign(shape, stan::math::exp((get_base1(a, 1, "a", 1) + (get_base1(bHistory, 1, "bHistory", 1) * get_base1(history_mix, iClear, "history_mix", 1)))));
                current_statement_begin__ = 175;
                stan::math::assign(scale, stan::math::exp((get_base1(a, 2, "a", 1) + (get_base1(bHistory, 2, "bHistory", 1) * get_base1(history_mix, iClear, "history_mix", 1)))));
                current_statement_begin__ = 176;
                stan::model::assign(predicted_duration, 
                            stan::model::cons_list(stan::model::index_uni(iClear), stan::model::nil_index_list()), 
                            (shape * scale), 
                            "assigning variable predicted_duration");
                current_statement_begin__ = 177;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(iClear), stan::model::nil_index_list()), 
                            gamma_log(get_base1(clear_duration, iClear, "clear_duration", 1), shape, (1 / scale)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 166;
            size_t log_lik_j_1_max__ = clearN;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 167;
            size_t predicted_duration_j_1_max__ = clearN;
            for (size_t j_1__ = 0; j_1__ < predicted_duration_j_1_max__; ++j_1__) {
                vars__.push_back(predicted_duration(j_1__));
            }
            current_statement_begin__ = 170;
            vars__.push_back(shape);
            current_statement_begin__ = 171;
            vars__.push_back(scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_cumhist_gamma";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t normalized_tau_k_0_max__ = (fit_norm_tau ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < normalized_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normalized_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixed_state_k_0_max__ = (fit_mixed_state ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < mixed_state_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixed_state" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_mixture_k_0_max__ = (fit_history_mix ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < history_mixture_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history_mixture" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bHistory_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < bHistory_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bHistory" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t history_mix_k_0_max__ = clearN;
            for (size_t k_0__ = 0; k_0__ < history_mix_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "history_mix" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = clearN;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t predicted_duration_j_1_max__ = clearN;
        for (size_t j_1__ = 0; j_1__ < predicted_duration_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predicted_duration" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t normalized_tau_k_0_max__ = (fit_norm_tau ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < normalized_tau_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "normalized_tau" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixed_state_k_0_max__ = (fit_mixed_state ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < mixed_state_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixed_state" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_mixture_k_0_max__ = (fit_history_mix ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < history_mixture_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history_mixture" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < a_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t bHistory_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < bHistory_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bHistory" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t history_mix_k_0_max__ = clearN;
            for (size_t k_0__ = 0; k_0__ < history_mix_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "history_mix" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = clearN;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t predicted_duration_j_1_max__ = clearN;
        for (size_t j_1__ = 0; j_1__ < predicted_duration_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predicted_duration" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_cumhist_gamma_namespace::model_cumhist_gamma stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
